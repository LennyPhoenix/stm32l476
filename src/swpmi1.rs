# [repr (C)] # [doc = "Register block"] pub struct RegisterBlock { cr : Cr , brr : Brr , _reserved2 : [u8 ; 0x04] , isr : Isr , icr : Icr , ier : Ier , rfl : Rfl , tdr : Tdr , rdr : Rdr , or : Or , } impl RegisterBlock { # [doc = "0x00 - SWPMI Configuration/Control register"] # [inline (always)] pub const fn cr (& self) -> & Cr { & self . cr } # [doc = "0x04 - SWPMI Bitrate register"] # [inline (always)] pub const fn brr (& self) -> & Brr { & self . brr } # [doc = "0x0c - SWPMI Interrupt and Status register"] # [inline (always)] pub const fn isr (& self) -> & Isr { & self . isr } # [doc = "0x10 - SWPMI Interrupt Flag Clear register"] # [inline (always)] pub const fn icr (& self) -> & Icr { & self . icr } # [doc = "0x14 - SWPMI Interrupt Enable register"] # [inline (always)] pub const fn ier (& self) -> & Ier { & self . ier } # [doc = "0x18 - SWPMI Receive Frame Length register"] # [inline (always)] pub const fn rfl (& self) -> & Rfl { & self . rfl } # [doc = "0x1c - SWPMI Transmit data register"] # [inline (always)] pub const fn tdr (& self) -> & Tdr { & self . tdr } # [doc = "0x20 - SWPMI Receive data register"] # [inline (always)] pub const fn rdr (& self) -> & Rdr { & self . rdr } # [doc = "0x24 - SWPMI Option register"] # [inline (always)] pub const fn or (& self) -> & Or { & self . or } } # [doc = "CR (rw) register accessor: SWPMI Configuration/Control register\n\nYou can [`read`](crate::Reg::read) this register and get [`cr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cr`] module"] # [doc (alias = "CR")] pub type Cr = crate :: Reg < cr :: CrSpec > ; # [doc = "SWPMI Configuration/Control register"] pub mod cr ; # [doc = "BRR (rw) register accessor: SWPMI Bitrate register\n\nYou can [`read`](crate::Reg::read) this register and get [`brr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`brr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@brr`] module"] # [doc (alias = "BRR")] pub type Brr = crate :: Reg < brr :: BrrSpec > ; # [doc = "SWPMI Bitrate register"] pub mod brr ; # [doc = "ISR (r) register accessor: SWPMI Interrupt and Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`isr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@isr`] module"] # [doc (alias = "ISR")] pub type Isr = crate :: Reg < isr :: IsrSpec > ; # [doc = "SWPMI Interrupt and Status register"] pub mod isr ; # [doc = "ICR (w) register accessor: SWPMI Interrupt Flag Clear register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`icr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@icr`] module"] # [doc (alias = "ICR")] pub type Icr = crate :: Reg < icr :: IcrSpec > ; # [doc = "SWPMI Interrupt Flag Clear register"] pub mod icr ; # [doc = "IER (rw) register accessor: SWPMI Interrupt Enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ier::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ier::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ier`] module"] # [doc (alias = "IER")] pub type Ier = crate :: Reg < ier :: IerSpec > ; # [doc = "SWPMI Interrupt Enable register"] pub mod ier ; # [doc = "RFL (r) register accessor: SWPMI Receive Frame Length register\n\nYou can [`read`](crate::Reg::read) this register and get [`rfl::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rfl`] module"] # [doc (alias = "RFL")] pub type Rfl = crate :: Reg < rfl :: RflSpec > ; # [doc = "SWPMI Receive Frame Length register"] pub mod rfl ; # [doc = "TDR (w) register accessor: SWPMI Transmit data register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tdr::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tdr`] module"] # [doc (alias = "TDR")] pub type Tdr = crate :: Reg < tdr :: TdrSpec > ; # [doc = "SWPMI Transmit data register"] pub mod tdr ; # [doc = "RDR (r) register accessor: SWPMI Receive data register\n\nYou can [`read`](crate::Reg::read) this register and get [`rdr::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rdr`] module"] # [doc (alias = "RDR")] pub type Rdr = crate :: Reg < rdr :: RdrSpec > ; # [doc = "SWPMI Receive data register"] pub mod rdr ; # [doc = "OR (rw) register accessor: SWPMI Option register\n\nYou can [`read`](crate::Reg::read) this register and get [`or::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`or::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@or`] module"] # [doc (alias = "OR")] pub type Or = crate :: Reg < or :: OrSpec > ; # [doc = "SWPMI Option register"] pub mod or ;