#![doc = "Peripheral access API for STM32L476 microcontrollers (generated using svd2rust v0.36.0 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.36.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
#![cfg_attr(docsrs, feature(doc_auto_cfg))]
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 4;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
extern "C" {
    fn WWDG();
    fn PVD_PVM();
    fn TAMP_STAMP();
    fn RTC_WKUP();
    fn FLASH();
    fn RCC();
    fn EXTI0();
    fn EXTI1();
    fn EXTI2();
    fn EXTI3();
    fn EXTI4();
    fn DMA1_CH1();
    fn DMA1_CH2();
    fn DMA1_CH3();
    fn DMA1_CH4();
    fn DMA1_CH5();
    fn DMA1_CH6();
    fn DMA1_CH7();
    fn ADC1_2();
    fn CAN1_TX();
    fn CAN1_RX0();
    fn CAN1_RX1();
    fn CAN1_SCE();
    fn EXTI9_5();
    fn TIM1_BRK_TIM15();
    fn TIM1_UP_TIM16();
    fn TIM1_TRG_COM_TIM17();
    fn TIM1_CC();
    fn TIM2();
    fn TIM3();
    fn TIM4();
    fn I2C1_EV();
    fn I2C1_ER();
    fn I2C2_EV();
    fn I2C2_ER();
    fn SPI1();
    fn SPI2();
    fn USART1();
    fn USART2();
    fn USART3();
    fn EXTI15_10();
    fn RTC_ALARM();
    fn DFSDM1_FLT3();
    fn TIM8_BRK();
    fn TIM8_UP();
    fn TIM8_TRG_COM();
    fn TIM8_CC();
    fn ADC3();
    fn FMC();
    fn SDMMC1();
    fn TIM5();
    fn SPI3();
    fn UART4();
    fn UART5();
    fn TIM6_DACUNDER();
    fn TIM7();
    fn DMA2_CH1();
    fn DMA2_CH2();
    fn DMA2_CH3();
    fn DMA2_CH4();
    fn DMA2_CH5();
    fn DFSDM1_FLT0();
    fn DFSDM1_FLT1();
    fn DFSDM1_FLT2();
    fn COMP();
    fn LPTIM1();
    fn LPTIM2();
    fn OTG_FS();
    fn DMA2_CH6();
    fn DMA2_CH7();
    fn LPUART1();
    fn QUADSPI();
    fn I2C3_EV();
    fn I2C3_ER();
    fn SAI1();
    fn SAI2();
    fn SWPMI1();
    fn TSC();
    fn LCD();
    fn AES();
    fn RNG();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 81] = [
    Vector { _handler: WWDG },
    Vector { _handler: PVD_PVM },
    Vector {
        _handler: TAMP_STAMP,
    },
    Vector { _handler: RTC_WKUP },
    Vector { _handler: FLASH },
    Vector { _handler: RCC },
    Vector { _handler: EXTI0 },
    Vector { _handler: EXTI1 },
    Vector { _handler: EXTI2 },
    Vector { _handler: EXTI3 },
    Vector { _handler: EXTI4 },
    Vector { _handler: DMA1_CH1 },
    Vector { _handler: DMA1_CH2 },
    Vector { _handler: DMA1_CH3 },
    Vector { _handler: DMA1_CH4 },
    Vector { _handler: DMA1_CH5 },
    Vector { _handler: DMA1_CH6 },
    Vector { _handler: DMA1_CH7 },
    Vector { _handler: ADC1_2 },
    Vector { _handler: CAN1_TX },
    Vector { _handler: CAN1_RX0 },
    Vector { _handler: CAN1_RX1 },
    Vector { _handler: CAN1_SCE },
    Vector { _handler: EXTI9_5 },
    Vector {
        _handler: TIM1_BRK_TIM15,
    },
    Vector {
        _handler: TIM1_UP_TIM16,
    },
    Vector {
        _handler: TIM1_TRG_COM_TIM17,
    },
    Vector { _handler: TIM1_CC },
    Vector { _handler: TIM2 },
    Vector { _handler: TIM3 },
    Vector { _handler: TIM4 },
    Vector { _handler: I2C1_EV },
    Vector { _handler: I2C1_ER },
    Vector { _handler: I2C2_EV },
    Vector { _handler: I2C2_ER },
    Vector { _handler: SPI1 },
    Vector { _handler: SPI2 },
    Vector { _handler: USART1 },
    Vector { _handler: USART2 },
    Vector { _handler: USART3 },
    Vector {
        _handler: EXTI15_10,
    },
    Vector {
        _handler: RTC_ALARM,
    },
    Vector {
        _handler: DFSDM1_FLT3,
    },
    Vector { _handler: TIM8_BRK },
    Vector { _handler: TIM8_UP },
    Vector {
        _handler: TIM8_TRG_COM,
    },
    Vector { _handler: TIM8_CC },
    Vector { _handler: ADC3 },
    Vector { _handler: FMC },
    Vector { _handler: SDMMC1 },
    Vector { _handler: TIM5 },
    Vector { _handler: SPI3 },
    Vector { _handler: UART4 },
    Vector { _handler: UART5 },
    Vector {
        _handler: TIM6_DACUNDER,
    },
    Vector { _handler: TIM7 },
    Vector { _handler: DMA2_CH1 },
    Vector { _handler: DMA2_CH2 },
    Vector { _handler: DMA2_CH3 },
    Vector { _handler: DMA2_CH4 },
    Vector { _handler: DMA2_CH5 },
    Vector {
        _handler: DFSDM1_FLT0,
    },
    Vector {
        _handler: DFSDM1_FLT1,
    },
    Vector {
        _handler: DFSDM1_FLT2,
    },
    Vector { _handler: COMP },
    Vector { _handler: LPTIM1 },
    Vector { _handler: LPTIM2 },
    Vector { _handler: OTG_FS },
    Vector { _handler: DMA2_CH6 },
    Vector { _handler: DMA2_CH7 },
    Vector { _handler: LPUART1 },
    Vector { _handler: QUADSPI },
    Vector { _handler: I2C3_EV },
    Vector { _handler: I2C3_ER },
    Vector { _handler: SAI1 },
    Vector { _handler: SAI2 },
    Vector { _handler: SWPMI1 },
    Vector { _handler: TSC },
    Vector { _handler: LCD },
    Vector { _handler: AES },
    Vector { _handler: RNG },
];
#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "0 - Window Watchdog interrupt"]
    WWDG = 0,
    #[doc = "1 - PVD through EXTI line detection"]
    PVD_PVM = 1,
    #[doc = "2 - Tamper and TimeStamp interrupts"]
    TAMP_STAMP = 2,
    #[doc = "3 - RTC Tamper or TimeStamp /CSS on LSE through EXTI line 19 interrupts"]
    RTC_WKUP = 3,
    #[doc = "4 - Flash global interrupt"]
    FLASH = 4,
    #[doc = "5 - RCC global interrupt"]
    RCC = 5,
    #[doc = "6 - EXTI Line 0 interrupt"]
    EXTI0 = 6,
    #[doc = "7 - EXTI Line 1 interrupt"]
    EXTI1 = 7,
    #[doc = "8 - EXTI Line 2 interrupt"]
    EXTI2 = 8,
    #[doc = "9 - EXTI Line 3 interrupt"]
    EXTI3 = 9,
    #[doc = "10 - EXTI Line 4 interrupt"]
    EXTI4 = 10,
    #[doc = "11 - DMA1 Channel1 global interrupt"]
    DMA1_CH1 = 11,
    #[doc = "12 - DMA1 Channel2 global interrupt"]
    DMA1_CH2 = 12,
    #[doc = "13 - DMA1 Channel3 interrupt"]
    DMA1_CH3 = 13,
    #[doc = "14 - DMA1 Channel4 interrupt"]
    DMA1_CH4 = 14,
    #[doc = "15 - DMA1 Channel5 interrupt"]
    DMA1_CH5 = 15,
    #[doc = "16 - DMA1 Channel6 interrupt"]
    DMA1_CH6 = 16,
    #[doc = "17 - DMA1 Channel 7 interrupt"]
    DMA1_CH7 = 17,
    #[doc = "18 - ADC1 and ADC2 global interrupt"]
    ADC1_2 = 18,
    #[doc = "19 - CAN1 TX interrupts"]
    CAN1_TX = 19,
    #[doc = "20 - CAN1 RX0 interrupts"]
    CAN1_RX0 = 20,
    #[doc = "21 - CAN1 RX1 interrupts"]
    CAN1_RX1 = 21,
    #[doc = "22 - CAN1 SCE interrupt"]
    CAN1_SCE = 22,
    #[doc = "23 - EXTI Line5 to Line9 interrupts"]
    EXTI9_5 = 23,
    #[doc = "24 - TIM1 Break/TIM15 global interrupts"]
    TIM1_BRK_TIM15 = 24,
    #[doc = "25 - TIM1 Update/TIM16 global interrupts"]
    TIM1_UP_TIM16 = 25,
    #[doc = "26 - TIM1 Trigger and Commutation interrupts and TIM17 global interrupt"]
    TIM1_TRG_COM_TIM17 = 26,
    #[doc = "27 - TIM1 Capture Compare interrupt"]
    TIM1_CC = 27,
    #[doc = "28 - TIM2 global interrupt"]
    TIM2 = 28,
    #[doc = "29 - TIM3 global interrupt"]
    TIM3 = 29,
    #[doc = "30 - TIM4 global interrupt"]
    TIM4 = 30,
    #[doc = "31 - I2C1 event interrupt"]
    I2C1_EV = 31,
    #[doc = "32 - I2C1 error interrupt"]
    I2C1_ER = 32,
    #[doc = "33 - I2C2 event interrupt"]
    I2C2_EV = 33,
    #[doc = "34 - I2C2 error interrupt"]
    I2C2_ER = 34,
    #[doc = "35 - SPI1 global interrupt"]
    SPI1 = 35,
    #[doc = "36 - SPI2 global interrupt"]
    SPI2 = 36,
    #[doc = "37 - USART1 global interrupt"]
    USART1 = 37,
    #[doc = "38 - USART2 global interrupt"]
    USART2 = 38,
    #[doc = "39 - USART3 global interrupt"]
    USART3 = 39,
    #[doc = "40 - EXTI Lines 10 to 15 interrupts"]
    EXTI15_10 = 40,
    #[doc = "41 - RTC alarms through EXTI line 18 interrupts"]
    RTC_ALARM = 41,
    #[doc = "42 - DFSDM1_FLT3 global interrupt"]
    DFSDM1_FLT3 = 42,
    #[doc = "43 - TIM8 Break Interrupt"]
    TIM8_BRK = 43,
    #[doc = "44 - TIM8 Update Interrupt"]
    TIM8_UP = 44,
    #[doc = "45 - TIM8 Trigger and Commutation Interrupt"]
    TIM8_TRG_COM = 45,
    #[doc = "46 - TIM8 Capture Compare Interrupt"]
    TIM8_CC = 46,
    #[doc = "47 - ADC3 global interrupt"]
    ADC3 = 47,
    #[doc = "48 - FMC global Interrupt"]
    FMC = 48,
    #[doc = "49 - SDMMC global Interrupt"]
    SDMMC1 = 49,
    #[doc = "50 - TIM5 global Interrupt"]
    TIM5 = 50,
    #[doc = "51 - SPI3 global Interrupt"]
    SPI3 = 51,
    #[doc = "52 - UART4 global Interrupt"]
    UART4 = 52,
    #[doc = "53 - UART5 global Interrupt"]
    UART5 = 53,
    #[doc = "54 - TIM6 global and DAC1 and 2 underrun error interrupts"]
    TIM6_DACUNDER = 54,
    #[doc = "55 - TIM7 global interrupt"]
    TIM7 = 55,
    #[doc = "56 - DMA2 Channel 1 global Interrupt"]
    DMA2_CH1 = 56,
    #[doc = "57 - DMA2 Channel 2 global Interrupt"]
    DMA2_CH2 = 57,
    #[doc = "58 - DMA2 Channel 3 global Interrupt"]
    DMA2_CH3 = 58,
    #[doc = "59 - DMA2 Channel 4 global Interrupt"]
    DMA2_CH4 = 59,
    #[doc = "60 - DMA2 Channel 5 global Interrupt"]
    DMA2_CH5 = 60,
    #[doc = "61 - DFSDM1_FLT0 global interrupt"]
    DFSDM1_FLT0 = 61,
    #[doc = "62 - DFSDM1_FLT1 global interrupt"]
    DFSDM1_FLT1 = 62,
    #[doc = "63 - DFSDM1_FLT2 global interrupt"]
    DFSDM1_FLT2 = 63,
    #[doc = "64 - COMP1 and COMP2 interrupts"]
    COMP = 64,
    #[doc = "65 - LP TIM1 interrupt"]
    LPTIM1 = 65,
    #[doc = "66 - LP TIM2 interrupt"]
    LPTIM2 = 66,
    #[doc = "67 - USB OTG FS global Interrupt"]
    OTG_FS = 67,
    #[doc = "68 - DMA2 Channel 6 global Interrupt"]
    DMA2_CH6 = 68,
    #[doc = "69 - DMA2 Channel 7 global Interrupt"]
    DMA2_CH7 = 69,
    #[doc = "70 - LPUART1 global interrupt"]
    LPUART1 = 70,
    #[doc = "71 - Quad SPI global interrupt"]
    QUADSPI = 71,
    #[doc = "72 - I2C3 event interrupt"]
    I2C3_EV = 72,
    #[doc = "73 - I2C3 error interrupt"]
    I2C3_ER = 73,
    #[doc = "74 - SAI1 global interrupt"]
    SAI1 = 74,
    #[doc = "75 - SAI2 global interrupt"]
    SAI2 = 75,
    #[doc = "76 - SWPMI1 global interrupt"]
    SWPMI1 = 76,
    #[doc = "77 - TSC global interrupt"]
    TSC = 77,
    #[doc = "78 - LCD global interrupt"]
    LCD = 78,
    #[doc = "79 - AES global interrupt"]
    AES = 79,
    #[doc = "80 - RNG and HASH global interrupt"]
    RNG = 80,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
#[doc = "Digital-to-analog converter"]
pub type Dac = crate::Periph<dac::RegisterBlock, 0x4000_7400>;
impl core::fmt::Debug for Dac {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dac").finish()
    }
}
#[doc = "Digital-to-analog converter"]
pub mod dac;
#[doc = "Direct memory access controller"]
pub type Dma1 = crate::Periph<dma1::RegisterBlock, 0x4002_0000>;
impl core::fmt::Debug for Dma1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dma1").finish()
    }
}
#[doc = "Direct memory access controller"]
pub mod dma1;
#[doc = "Direct memory access controller"]
pub type Dma2 = crate::Periph<dma1::RegisterBlock, 0x4002_0400>;
impl core::fmt::Debug for Dma2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dma2").finish()
    }
}
#[doc = "Direct memory access controller"]
pub use self::dma1 as dma2;
#[doc = "Cyclic redundancy check calculation unit"]
pub type Crc = crate::Periph<crc::RegisterBlock, 0x4002_3000>;
impl core::fmt::Debug for Crc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Crc").finish()
    }
}
#[doc = "Cyclic redundancy check calculation unit"]
pub mod crc;
#[doc = "Liquid crystal display controller"]
pub type Lcd = crate::Periph<lcd::RegisterBlock, 0x4000_2400>;
impl core::fmt::Debug for Lcd {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Lcd").finish()
    }
}
#[doc = "Liquid crystal display controller"]
pub mod lcd;
#[doc = "Touch sensing controller"]
pub type Tsc = crate::Periph<tsc::RegisterBlock, 0x4002_4000>;
impl core::fmt::Debug for Tsc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tsc").finish()
    }
}
#[doc = "Touch sensing controller"]
pub mod tsc;
#[doc = "Independent watchdog"]
pub type Iwdg = crate::Periph<iwdg::RegisterBlock, 0x4000_3000>;
impl core::fmt::Debug for Iwdg {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Iwdg").finish()
    }
}
#[doc = "Independent watchdog"]
pub mod iwdg;
#[doc = "System window watchdog"]
pub type Wwdg = crate::Periph<wwdg::RegisterBlock, 0x4000_2c00>;
impl core::fmt::Debug for Wwdg {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wwdg").finish()
    }
}
#[doc = "System window watchdog"]
pub mod wwdg;
#[doc = "Comparator"]
pub type Comp = crate::Periph<comp::RegisterBlock, 0x4001_0200>;
impl core::fmt::Debug for Comp {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Comp").finish()
    }
}
#[doc = "Comparator"]
pub mod comp;
#[doc = "Firewall"]
pub type Firewall = crate::Periph<firewall::RegisterBlock, 0x4001_1c00>;
impl core::fmt::Debug for Firewall {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Firewall").finish()
    }
}
#[doc = "Firewall"]
pub mod firewall;
#[doc = "Inter-integrated circuit"]
pub type I2c1 = crate::Periph<i2c1::RegisterBlock, 0x4000_5400>;
impl core::fmt::Debug for I2c1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c1").finish()
    }
}
#[doc = "Inter-integrated circuit"]
pub mod i2c1;
#[doc = "Inter-integrated circuit"]
pub type I2c2 = crate::Periph<i2c1::RegisterBlock, 0x4000_5800>;
impl core::fmt::Debug for I2c2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c2").finish()
    }
}
#[doc = "Inter-integrated circuit"]
pub use self::i2c1 as i2c2;
#[doc = "Inter-integrated circuit"]
pub type I2c3 = crate::Periph<i2c1::RegisterBlock, 0x4000_5c00>;
impl core::fmt::Debug for I2c3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c3").finish()
    }
}
#[doc = "Inter-integrated circuit"]
pub use self::i2c1 as i2c3;
#[doc = "Flash"]
pub type Flash = crate::Periph<flash::RegisterBlock, 0x4002_2000>;
impl core::fmt::Debug for Flash {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Flash").finish()
    }
}
#[doc = "Flash"]
pub mod flash;
#[doc = "Debug support"]
pub type Dbgmcu = crate::Periph<dbgmcu::RegisterBlock, 0xe004_2000>;
impl core::fmt::Debug for Dbgmcu {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dbgmcu").finish()
    }
}
#[doc = "Debug support"]
pub mod dbgmcu;
#[doc = "QuadSPI interface"]
pub type Quadspi = crate::Periph<quadspi::RegisterBlock, 0xa000_1000>;
impl core::fmt::Debug for Quadspi {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Quadspi").finish()
    }
}
#[doc = "QuadSPI interface"]
pub mod quadspi;
#[doc = "Reset and clock control"]
pub type Rcc = crate::Periph<rcc::RegisterBlock, 0x4002_1000>;
impl core::fmt::Debug for Rcc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rcc").finish()
    }
}
#[doc = "Reset and clock control"]
pub mod rcc;
#[doc = "Power control"]
pub type Pwr = crate::Periph<pwr::RegisterBlock, 0x4000_7000>;
impl core::fmt::Debug for Pwr {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pwr").finish()
    }
}
#[doc = "Power control"]
pub mod pwr;
#[doc = "System configuration controller"]
pub type Syscfg = crate::Periph<syscfg::RegisterBlock, 0x4001_0000>;
impl core::fmt::Debug for Syscfg {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Syscfg").finish()
    }
}
#[doc = "System configuration controller"]
pub mod syscfg;
#[doc = "Digital filter for sigma delta modulators"]
pub type Dfsdm1 = crate::Periph<dfsdm1::RegisterBlock, 0x4001_6000>;
impl core::fmt::Debug for Dfsdm1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dfsdm1").finish()
    }
}
#[doc = "Digital filter for sigma delta modulators"]
pub mod dfsdm1;
#[doc = "Random number generator"]
pub type Rng = crate::Periph<rng::RegisterBlock, 0x5006_0800>;
impl core::fmt::Debug for Rng {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rng").finish()
    }
}
#[doc = "Random number generator"]
pub mod rng;
#[doc = "Advanced encryption standard hardware accelerator"]
pub type Aes = crate::Periph<aes::RegisterBlock, 0x5006_0000>;
impl core::fmt::Debug for Aes {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Aes").finish()
    }
}
#[doc = "Advanced encryption standard hardware accelerator"]
pub mod aes;
#[doc = "Analog-to-Digital Converter"]
pub type Adc1 = crate::Periph<adc1::RegisterBlock, 0x5004_0000>;
impl core::fmt::Debug for Adc1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc1").finish()
    }
}
#[doc = "Analog-to-Digital Converter"]
pub mod adc1;
#[doc = "Analog-to-Digital Converter"]
pub type Adc2 = crate::Periph<adc1::RegisterBlock, 0x5004_0100>;
impl core::fmt::Debug for Adc2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc2").finish()
    }
}
#[doc = "Analog-to-Digital Converter"]
pub use self::adc1 as adc2;
#[doc = "Analog-to-Digital Converter"]
pub type Adc3 = crate::Periph<adc1::RegisterBlock, 0x5004_0200>;
impl core::fmt::Debug for Adc3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc3").finish()
    }
}
#[doc = "Analog-to-Digital Converter"]
pub use self::adc1 as adc3;
#[doc = "Analog-to-Digital Converter"]
pub type AdcCommon = crate::Periph<adc_common::RegisterBlock, 0x5004_0300>;
impl core::fmt::Debug for AdcCommon {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("AdcCommon").finish()
    }
}
#[doc = "Analog-to-Digital Converter"]
pub mod adc_common;
#[doc = "General-purpose I/Os"]
pub type Gpioa = crate::Periph<gpioa::RegisterBlock, 0x4800_0000>;
impl core::fmt::Debug for Gpioa {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioa").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub mod gpioa;
#[doc = "General-purpose I/Os"]
pub type Gpiob = crate::Periph<gpiob::RegisterBlock, 0x4800_0400>;
impl core::fmt::Debug for Gpiob {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiob").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub mod gpiob;
#[doc = "General-purpose I/Os"]
pub type Gpioc = crate::Periph<gpioc::RegisterBlock, 0x4800_0800>;
impl core::fmt::Debug for Gpioc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioc").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub mod gpioc;
#[doc = "General-purpose I/Os"]
pub type Gpiod = crate::Periph<gpioc::RegisterBlock, 0x4800_0c00>;
impl core::fmt::Debug for Gpiod {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiod").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpioc as gpiod;
#[doc = "General-purpose I/Os"]
pub type Gpioe = crate::Periph<gpioc::RegisterBlock, 0x4800_1000>;
impl core::fmt::Debug for Gpioe {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioe").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpioc as gpioe;
#[doc = "General-purpose I/Os"]
pub type Gpiof = crate::Periph<gpioc::RegisterBlock, 0x4800_1400>;
impl core::fmt::Debug for Gpiof {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiof").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpioc as gpiof;
#[doc = "General-purpose I/Os"]
pub type Gpiog = crate::Periph<gpioc::RegisterBlock, 0x4800_1800>;
impl core::fmt::Debug for Gpiog {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiog").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpioc as gpiog;
#[doc = "General-purpose I/Os"]
pub type Gpioh = crate::Periph<gpioc::RegisterBlock, 0x4800_1c00>;
impl core::fmt::Debug for Gpioh {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioh").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpioc as gpioh;
#[doc = "Serial audio interface"]
pub type Sai1 = crate::Periph<sai1::RegisterBlock, 0x4001_5400>;
impl core::fmt::Debug for Sai1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sai1").finish()
    }
}
#[doc = "Serial audio interface"]
pub mod sai1;
#[doc = "Serial audio interface"]
pub type Sai2 = crate::Periph<sai1::RegisterBlock, 0x4001_5800>;
impl core::fmt::Debug for Sai2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sai2").finish()
    }
}
#[doc = "Serial audio interface"]
pub use self::sai1 as sai2;
#[doc = "General-purpose-timers"]
pub type Tim2 = crate::Periph<tim2::RegisterBlock, 0x4000_0000>;
impl core::fmt::Debug for Tim2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim2").finish()
    }
}
#[doc = "General-purpose-timers"]
pub mod tim2;
#[doc = "General-purpose-timers"]
pub type Tim3 = crate::Periph<tim2::RegisterBlock, 0x4000_0400>;
impl core::fmt::Debug for Tim3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim3").finish()
    }
}
#[doc = "General-purpose-timers"]
pub use self::tim2 as tim3;
#[doc = "General-purpose-timers"]
pub type Tim4 = crate::Periph<tim2::RegisterBlock, 0x4000_0800>;
impl core::fmt::Debug for Tim4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim4").finish()
    }
}
#[doc = "General-purpose-timers"]
pub use self::tim2 as tim4;
#[doc = "General-purpose-timers"]
pub type Tim5 = crate::Periph<tim2::RegisterBlock, 0x4000_0c00>;
impl core::fmt::Debug for Tim5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim5").finish()
    }
}
#[doc = "General-purpose-timers"]
pub use self::tim2 as tim5;
#[doc = "General purpose timers"]
pub type Tim15 = crate::Periph<tim15::RegisterBlock, 0x4001_4000>;
impl core::fmt::Debug for Tim15 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim15").finish()
    }
}
#[doc = "General purpose timers"]
pub mod tim15;
#[doc = "General purpose timers"]
pub type Tim16 = crate::Periph<tim16::RegisterBlock, 0x4001_4400>;
impl core::fmt::Debug for Tim16 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim16").finish()
    }
}
#[doc = "General purpose timers"]
pub mod tim16;
#[doc = "General purpose timers"]
pub type Tim17 = crate::Periph<tim16::RegisterBlock, 0x4001_4800>;
impl core::fmt::Debug for Tim17 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim17").finish()
    }
}
#[doc = "General purpose timers"]
pub use self::tim16 as tim17;
#[doc = "Advanced-timers"]
pub type Tim1 = crate::Periph<tim1::RegisterBlock, 0x4001_2c00>;
impl core::fmt::Debug for Tim1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim1").finish()
    }
}
#[doc = "Advanced-timers"]
pub mod tim1;
#[doc = "Advanced-timers"]
pub type Tim8 = crate::Periph<tim8::RegisterBlock, 0x4001_3400>;
impl core::fmt::Debug for Tim8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim8").finish()
    }
}
#[doc = "Advanced-timers"]
pub mod tim8;
#[doc = "Basic-timers"]
pub type Tim6 = crate::Periph<tim6::RegisterBlock, 0x4000_1000>;
impl core::fmt::Debug for Tim6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim6").finish()
    }
}
#[doc = "Basic-timers"]
pub mod tim6;
#[doc = "Basic-timers"]
pub type Tim7 = crate::Periph<tim6::RegisterBlock, 0x4000_1400>;
impl core::fmt::Debug for Tim7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim7").finish()
    }
}
#[doc = "Basic-timers"]
pub use self::tim6 as tim7;
#[doc = "Low power timer"]
pub type Lptim1 = crate::Periph<lptim1::RegisterBlock, 0x4000_7c00>;
impl core::fmt::Debug for Lptim1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Lptim1").finish()
    }
}
#[doc = "Low power timer"]
pub mod lptim1;
#[doc = "Low power timer"]
pub type Lptim2 = crate::Periph<lptim1::RegisterBlock, 0x4000_9400>;
impl core::fmt::Debug for Lptim2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Lptim2").finish()
    }
}
#[doc = "Low power timer"]
pub use self::lptim1 as lptim2;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Usart1 = crate::Periph<usart1::RegisterBlock, 0x4001_3800>;
impl core::fmt::Debug for Usart1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart1").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub mod usart1;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Usart2 = crate::Periph<usart2::RegisterBlock, 0x4000_4400>;
impl core::fmt::Debug for Usart2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart2").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub mod usart2;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Usart3 = crate::Periph<usart3::RegisterBlock, 0x4000_4800>;
impl core::fmt::Debug for Usart3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart3").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub mod usart3;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Uart4 = crate::Periph<uart4::RegisterBlock, 0x4000_4c00>;
impl core::fmt::Debug for Uart4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart4").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub mod uart4;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Uart5 = crate::Periph<uart4::RegisterBlock, 0x4000_5000>;
impl core::fmt::Debug for Uart5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart5").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::uart4 as uart5;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Lpuart1 = crate::Periph<lpuart1::RegisterBlock, 0x4000_8000>;
impl core::fmt::Debug for Lpuart1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Lpuart1").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub mod lpuart1;
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub type Spi1 = crate::Periph<spi1::RegisterBlock, 0x4001_3000>;
impl core::fmt::Debug for Spi1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi1").finish()
    }
}
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub mod spi1;
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub type Spi2 = crate::Periph<spi1::RegisterBlock, 0x4000_3800>;
impl core::fmt::Debug for Spi2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi2").finish()
    }
}
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub use self::spi1 as spi2;
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub type Spi3 = crate::Periph<spi1::RegisterBlock, 0x4000_3c00>;
impl core::fmt::Debug for Spi3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi3").finish()
    }
}
#[doc = "Serial peripheral interface/Inter-IC sound"]
pub use self::spi1 as spi3;
#[doc = "Secure digital input/output interface"]
pub type Sdmmc1 = crate::Periph<sdmmc1::RegisterBlock, 0x4001_2800>;
impl core::fmt::Debug for Sdmmc1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sdmmc1").finish()
    }
}
#[doc = "Secure digital input/output interface"]
pub mod sdmmc1;
#[doc = "External interrupt/event controller"]
pub type Exti = crate::Periph<exti::RegisterBlock, 0x4001_0400>;
impl core::fmt::Debug for Exti {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Exti").finish()
    }
}
#[doc = "External interrupt/event controller"]
pub mod exti;
#[doc = "Voltage reference buffer"]
pub type Vrefbuf = crate::Periph<vrefbuf::RegisterBlock, 0x4001_0030>;
impl core::fmt::Debug for Vrefbuf {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Vrefbuf").finish()
    }
}
#[doc = "Voltage reference buffer"]
pub mod vrefbuf;
#[doc = "Controller area network"]
pub type Can1 = crate::Periph<can1::RegisterBlock, 0x4000_6400>;
impl core::fmt::Debug for Can1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Can1").finish()
    }
}
#[doc = "Controller area network"]
pub mod can1;
#[doc = "Real-time clock"]
pub type Rtc = crate::Periph<rtc::RegisterBlock, 0x4000_2800>;
impl core::fmt::Debug for Rtc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rtc").finish()
    }
}
#[doc = "Real-time clock"]
pub mod rtc;
#[doc = "USB on the go full speed"]
pub type OtgFsGlobal = crate::Periph<otg_fs_global::RegisterBlock, 0x5000_0000>;
impl core::fmt::Debug for OtgFsGlobal {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OtgFsGlobal").finish()
    }
}
#[doc = "USB on the go full speed"]
pub mod otg_fs_global;
#[doc = "USB on the go full speed"]
pub type OtgFsHost = crate::Periph<otg_fs_host::RegisterBlock, 0x5000_0400>;
impl core::fmt::Debug for OtgFsHost {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OtgFsHost").finish()
    }
}
#[doc = "USB on the go full speed"]
pub mod otg_fs_host;
#[doc = "USB on the go full speed"]
pub type OtgFsDevice = crate::Periph<otg_fs_device::RegisterBlock, 0x5000_0800>;
impl core::fmt::Debug for OtgFsDevice {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OtgFsDevice").finish()
    }
}
#[doc = "USB on the go full speed"]
pub mod otg_fs_device;
#[doc = "USB on the go full speed"]
pub type OtgFsPwrclk = crate::Periph<otg_fs_pwrclk::RegisterBlock, 0x5000_0e00>;
impl core::fmt::Debug for OtgFsPwrclk {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OtgFsPwrclk").finish()
    }
}
#[doc = "USB on the go full speed"]
pub mod otg_fs_pwrclk;
#[doc = "Single Wire Protocol Master Interface"]
pub type Swpmi1 = crate::Periph<swpmi1::RegisterBlock, 0x4000_8800>;
impl core::fmt::Debug for Swpmi1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Swpmi1").finish()
    }
}
#[doc = "Single Wire Protocol Master Interface"]
pub mod swpmi1;
#[doc = "Operational amplifiers"]
pub type Opamp = crate::Periph<opamp::RegisterBlock, 0x4000_7800>;
impl core::fmt::Debug for Opamp {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Opamp").finish()
    }
}
#[doc = "Operational amplifiers"]
pub mod opamp;
#[doc = "Flexible memory controller"]
pub type Fmc = crate::Periph<fmc::RegisterBlock, 0xa000_0000>;
impl core::fmt::Debug for Fmc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Fmc").finish()
    }
}
#[doc = "Flexible memory controller"]
pub mod fmc;
#[doc = "Clock recovery system"]
pub type Crs = crate::Periph<crs::RegisterBlock, 0x4000_6000>;
impl core::fmt::Debug for Crs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Crs").finish()
    }
}
#[doc = "Clock recovery system"]
pub mod crs;
#[doc = "Digital camera interface"]
pub type Dcmi = crate::Periph<dcmi::RegisterBlock, 0x5005_0000>;
impl core::fmt::Debug for Dcmi {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dcmi").finish()
    }
}
#[doc = "Digital camera interface"]
pub mod dcmi;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "DAC"]
    pub dac: Dac,
    #[doc = "DMA1"]
    pub dma1: Dma1,
    #[doc = "DMA2"]
    pub dma2: Dma2,
    #[doc = "CRC"]
    pub crc: Crc,
    #[doc = "LCD"]
    pub lcd: Lcd,
    #[doc = "TSC"]
    pub tsc: Tsc,
    #[doc = "IWDG"]
    pub iwdg: Iwdg,
    #[doc = "WWDG"]
    pub wwdg: Wwdg,
    #[doc = "COMP"]
    pub comp: Comp,
    #[doc = "FIREWALL"]
    pub firewall: Firewall,
    #[doc = "I2C1"]
    pub i2c1: I2c1,
    #[doc = "I2C2"]
    pub i2c2: I2c2,
    #[doc = "I2C3"]
    pub i2c3: I2c3,
    #[doc = "FLASH"]
    pub flash: Flash,
    #[doc = "DBGMCU"]
    pub dbgmcu: Dbgmcu,
    #[doc = "QUADSPI"]
    pub quadspi: Quadspi,
    #[doc = "RCC"]
    pub rcc: Rcc,
    #[doc = "PWR"]
    pub pwr: Pwr,
    #[doc = "SYSCFG"]
    pub syscfg: Syscfg,
    #[doc = "DFSDM1"]
    pub dfsdm1: Dfsdm1,
    #[doc = "RNG"]
    pub rng: Rng,
    #[doc = "AES"]
    pub aes: Aes,
    #[doc = "ADC1"]
    pub adc1: Adc1,
    #[doc = "ADC2"]
    pub adc2: Adc2,
    #[doc = "ADC3"]
    pub adc3: Adc3,
    #[doc = "ADC_Common"]
    pub adc_common: AdcCommon,
    #[doc = "GPIOA"]
    pub gpioa: Gpioa,
    #[doc = "GPIOB"]
    pub gpiob: Gpiob,
    #[doc = "GPIOC"]
    pub gpioc: Gpioc,
    #[doc = "GPIOD"]
    pub gpiod: Gpiod,
    #[doc = "GPIOE"]
    pub gpioe: Gpioe,
    #[doc = "GPIOF"]
    pub gpiof: Gpiof,
    #[doc = "GPIOG"]
    pub gpiog: Gpiog,
    #[doc = "GPIOH"]
    pub gpioh: Gpioh,
    #[doc = "SAI1"]
    pub sai1: Sai1,
    #[doc = "SAI2"]
    pub sai2: Sai2,
    #[doc = "TIM2"]
    pub tim2: Tim2,
    #[doc = "TIM3"]
    pub tim3: Tim3,
    #[doc = "TIM4"]
    pub tim4: Tim4,
    #[doc = "TIM5"]
    pub tim5: Tim5,
    #[doc = "TIM15"]
    pub tim15: Tim15,
    #[doc = "TIM16"]
    pub tim16: Tim16,
    #[doc = "TIM17"]
    pub tim17: Tim17,
    #[doc = "TIM1"]
    pub tim1: Tim1,
    #[doc = "TIM8"]
    pub tim8: Tim8,
    #[doc = "TIM6"]
    pub tim6: Tim6,
    #[doc = "TIM7"]
    pub tim7: Tim7,
    #[doc = "LPTIM1"]
    pub lptim1: Lptim1,
    #[doc = "LPTIM2"]
    pub lptim2: Lptim2,
    #[doc = "USART1"]
    pub usart1: Usart1,
    #[doc = "USART2"]
    pub usart2: Usart2,
    #[doc = "USART3"]
    pub usart3: Usart3,
    #[doc = "UART4"]
    pub uart4: Uart4,
    #[doc = "UART5"]
    pub uart5: Uart5,
    #[doc = "LPUART1"]
    pub lpuart1: Lpuart1,
    #[doc = "SPI1"]
    pub spi1: Spi1,
    #[doc = "SPI2"]
    pub spi2: Spi2,
    #[doc = "SPI3"]
    pub spi3: Spi3,
    #[doc = "SDMMC1"]
    pub sdmmc1: Sdmmc1,
    #[doc = "EXTI"]
    pub exti: Exti,
    #[doc = "VREFBUF"]
    pub vrefbuf: Vrefbuf,
    #[doc = "CAN1"]
    pub can1: Can1,
    #[doc = "RTC"]
    pub rtc: Rtc,
    #[doc = "OTG_FS_GLOBAL"]
    pub otg_fs_global: OtgFsGlobal,
    #[doc = "OTG_FS_HOST"]
    pub otg_fs_host: OtgFsHost,
    #[doc = "OTG_FS_DEVICE"]
    pub otg_fs_device: OtgFsDevice,
    #[doc = "OTG_FS_PWRCLK"]
    pub otg_fs_pwrclk: OtgFsPwrclk,
    #[doc = "SWPMI1"]
    pub swpmi1: Swpmi1,
    #[doc = "OPAMP"]
    pub opamp: Opamp,
    #[doc = "FMC"]
    pub fmc: Fmc,
    #[doc = "CRS"]
    pub crs: Crs,
    #[doc = "DCMI"]
    pub dcmi: Dcmi,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            dac: Dac::steal(),
            dma1: Dma1::steal(),
            dma2: Dma2::steal(),
            crc: Crc::steal(),
            lcd: Lcd::steal(),
            tsc: Tsc::steal(),
            iwdg: Iwdg::steal(),
            wwdg: Wwdg::steal(),
            comp: Comp::steal(),
            firewall: Firewall::steal(),
            i2c1: I2c1::steal(),
            i2c2: I2c2::steal(),
            i2c3: I2c3::steal(),
            flash: Flash::steal(),
            dbgmcu: Dbgmcu::steal(),
            quadspi: Quadspi::steal(),
            rcc: Rcc::steal(),
            pwr: Pwr::steal(),
            syscfg: Syscfg::steal(),
            dfsdm1: Dfsdm1::steal(),
            rng: Rng::steal(),
            aes: Aes::steal(),
            adc1: Adc1::steal(),
            adc2: Adc2::steal(),
            adc3: Adc3::steal(),
            adc_common: AdcCommon::steal(),
            gpioa: Gpioa::steal(),
            gpiob: Gpiob::steal(),
            gpioc: Gpioc::steal(),
            gpiod: Gpiod::steal(),
            gpioe: Gpioe::steal(),
            gpiof: Gpiof::steal(),
            gpiog: Gpiog::steal(),
            gpioh: Gpioh::steal(),
            sai1: Sai1::steal(),
            sai2: Sai2::steal(),
            tim2: Tim2::steal(),
            tim3: Tim3::steal(),
            tim4: Tim4::steal(),
            tim5: Tim5::steal(),
            tim15: Tim15::steal(),
            tim16: Tim16::steal(),
            tim17: Tim17::steal(),
            tim1: Tim1::steal(),
            tim8: Tim8::steal(),
            tim6: Tim6::steal(),
            tim7: Tim7::steal(),
            lptim1: Lptim1::steal(),
            lptim2: Lptim2::steal(),
            usart1: Usart1::steal(),
            usart2: Usart2::steal(),
            usart3: Usart3::steal(),
            uart4: Uart4::steal(),
            uart5: Uart5::steal(),
            lpuart1: Lpuart1::steal(),
            spi1: Spi1::steal(),
            spi2: Spi2::steal(),
            spi3: Spi3::steal(),
            sdmmc1: Sdmmc1::steal(),
            exti: Exti::steal(),
            vrefbuf: Vrefbuf::steal(),
            can1: Can1::steal(),
            rtc: Rtc::steal(),
            otg_fs_global: OtgFsGlobal::steal(),
            otg_fs_host: OtgFsHost::steal(),
            otg_fs_device: OtgFsDevice::steal(),
            otg_fs_pwrclk: OtgFsPwrclk::steal(),
            swpmi1: Swpmi1::steal(),
            opamp: Opamp::steal(),
            fmc: Fmc::steal(),
            crs: Crs::steal(),
            dcmi: Dcmi::steal(),
        }
    }
}
