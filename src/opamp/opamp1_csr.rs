# [doc = "Register `OPAMP1_CSR` reader"] pub type R = crate :: R < Opamp1CsrSpec > ; # [doc = "Register `OPAMP1_CSR` writer"] pub type W = crate :: W < Opamp1CsrSpec > ; # [doc = "Field `OPAEN` reader - Operational amplifier Enable"] pub type OpaenR = crate :: BitReader ; # [doc = "Field `OPAEN` writer - Operational amplifier Enable"] pub type OpaenW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `OPALPM` reader - Operational amplifier Low Power Mode"] pub type OpalpmR = crate :: BitReader ; # [doc = "Field `OPALPM` writer - Operational amplifier Low Power Mode"] pub type OpalpmW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `OPAMODE` reader - Operational amplifier PGA mode"] pub type OpamodeR = crate :: FieldReader ; # [doc = "Field `OPAMODE` writer - Operational amplifier PGA mode"] pub type OpamodeW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ; # [doc = "Field `PGA_GAIN` reader - Operational amplifier Programmable amplifier gain value"] pub type PgaGainR = crate :: FieldReader ; # [doc = "Field `PGA_GAIN` writer - Operational amplifier Programmable amplifier gain value"] pub type PgaGainW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ; # [doc = "Field `VM_SEL` reader - Inverting input selection"] pub type VmSelR = crate :: FieldReader ; # [doc = "Field `VM_SEL` writer - Inverting input selection"] pub type VmSelW < 'a , REG > = crate :: FieldWriter < 'a , REG , 2 > ; # [doc = "Field `VP_SEL` reader - Non inverted input selection"] pub type VpSelR = crate :: BitReader ; # [doc = "Field `VP_SEL` writer - Non inverted input selection"] pub type VpSelW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CALON` reader - Calibration mode enabled"] pub type CalonR = crate :: BitReader ; # [doc = "Field `CALON` writer - Calibration mode enabled"] pub type CalonW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CALSEL` reader - Calibration selection"] pub type CalselR = crate :: BitReader ; # [doc = "Field `CALSEL` writer - Calibration selection"] pub type CalselW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `USERTRIM` reader - allows to switch from AOP offset trimmed values to AOP offset"] pub type UsertrimR = crate :: BitReader ; # [doc = "Field `USERTRIM` writer - allows to switch from AOP offset trimmed values to AOP offset"] pub type UsertrimW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `CALOUT` reader - Operational amplifier calibration output"] pub type CaloutR = crate :: BitReader ; # [doc = "Field `CALOUT` writer - Operational amplifier calibration output"] pub type CaloutW < 'a , REG > = crate :: BitWriter < 'a , REG > ; # [doc = "Field `OPA_RANGE` reader - Operational amplifier power supply range for stability"] pub type OpaRangeR = crate :: BitReader ; # [doc = "Field `OPA_RANGE` writer - Operational amplifier power supply range for stability"] pub type OpaRangeW < 'a , REG > = crate :: BitWriter < 'a , REG > ; impl R { # [doc = "Bit 0 - Operational amplifier Enable"] # [inline (always)] pub fn opaen (& self) -> OpaenR { OpaenR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Operational amplifier Low Power Mode"] # [inline (always)] pub fn opalpm (& self) -> OpalpmR { OpalpmR :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bits 2:3 - Operational amplifier PGA mode"] # [inline (always)] pub fn opamode (& self) -> OpamodeR { OpamodeR :: new (((self . bits >> 2) & 3) as u8) } # [doc = "Bits 4:5 - Operational amplifier Programmable amplifier gain value"] # [inline (always)] pub fn pga_gain (& self) -> PgaGainR { PgaGainR :: new (((self . bits >> 4) & 3) as u8) } # [doc = "Bits 8:9 - Inverting input selection"] # [inline (always)] pub fn vm_sel (& self) -> VmSelR { VmSelR :: new (((self . bits >> 8) & 3) as u8) } # [doc = "Bit 10 - Non inverted input selection"] # [inline (always)] pub fn vp_sel (& self) -> VpSelR { VpSelR :: new (((self . bits >> 10) & 1) != 0) } # [doc = "Bit 12 - Calibration mode enabled"] # [inline (always)] pub fn calon (& self) -> CalonR { CalonR :: new (((self . bits >> 12) & 1) != 0) } # [doc = "Bit 13 - Calibration selection"] # [inline (always)] pub fn calsel (& self) -> CalselR { CalselR :: new (((self . bits >> 13) & 1) != 0) } # [doc = "Bit 14 - allows to switch from AOP offset trimmed values to AOP offset"] # [inline (always)] pub fn usertrim (& self) -> UsertrimR { UsertrimR :: new (((self . bits >> 14) & 1) != 0) } # [doc = "Bit 15 - Operational amplifier calibration output"] # [inline (always)] pub fn calout (& self) -> CaloutR { CaloutR :: new (((self . bits >> 15) & 1) != 0) } # [doc = "Bit 31 - Operational amplifier power supply range for stability"] # [inline (always)] pub fn opa_range (& self) -> OpaRangeR { OpaRangeR :: new (((self . bits >> 31) & 1) != 0) } } impl W { # [doc = "Bit 0 - Operational amplifier Enable"] # [inline (always)] pub fn opaen (& mut self) -> OpaenW < Opamp1CsrSpec > { OpaenW :: new (self , 0) } # [doc = "Bit 1 - Operational amplifier Low Power Mode"] # [inline (always)] pub fn opalpm (& mut self) -> OpalpmW < Opamp1CsrSpec > { OpalpmW :: new (self , 1) } # [doc = "Bits 2:3 - Operational amplifier PGA mode"] # [inline (always)] pub fn opamode (& mut self) -> OpamodeW < Opamp1CsrSpec > { OpamodeW :: new (self , 2) } # [doc = "Bits 4:5 - Operational amplifier Programmable amplifier gain value"] # [inline (always)] pub fn pga_gain (& mut self) -> PgaGainW < Opamp1CsrSpec > { PgaGainW :: new (self , 4) } # [doc = "Bits 8:9 - Inverting input selection"] # [inline (always)] pub fn vm_sel (& mut self) -> VmSelW < Opamp1CsrSpec > { VmSelW :: new (self , 8) } # [doc = "Bit 10 - Non inverted input selection"] # [inline (always)] pub fn vp_sel (& mut self) -> VpSelW < Opamp1CsrSpec > { VpSelW :: new (self , 10) } # [doc = "Bit 12 - Calibration mode enabled"] # [inline (always)] pub fn calon (& mut self) -> CalonW < Opamp1CsrSpec > { CalonW :: new (self , 12) } # [doc = "Bit 13 - Calibration selection"] # [inline (always)] pub fn calsel (& mut self) -> CalselW < Opamp1CsrSpec > { CalselW :: new (self , 13) } # [doc = "Bit 14 - allows to switch from AOP offset trimmed values to AOP offset"] # [inline (always)] pub fn usertrim (& mut self) -> UsertrimW < Opamp1CsrSpec > { UsertrimW :: new (self , 14) } # [doc = "Bit 15 - Operational amplifier calibration output"] # [inline (always)] pub fn calout (& mut self) -> CaloutW < Opamp1CsrSpec > { CaloutW :: new (self , 15) } # [doc = "Bit 31 - Operational amplifier power supply range for stability"] # [inline (always)] pub fn opa_range (& mut self) -> OpaRangeW < Opamp1CsrSpec > { OpaRangeW :: new (self , 31) } } # [doc = "OPAMP1 control/status register\n\nYou can [`read`](crate::Reg::read) this register and get [`opamp1_csr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`opamp1_csr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct Opamp1CsrSpec ; impl crate :: RegisterSpec for Opamp1CsrSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`opamp1_csr::R`](R) reader structure"] impl crate :: Readable for Opamp1CsrSpec { } # [doc = "`write(|w| ..)` method takes [`opamp1_csr::W`](W) writer structure"] impl crate :: Writable for Opamp1CsrSpec { type Safety = crate :: Unsafe ; } # [doc = "`reset()` method sets OPAMP1_CSR to value 0"] impl crate :: Resettable for Opamp1CsrSpec { }